y_bar<-rep(mean(nowtot), 397)
#Mean of Y
x_1<-matrix(data=c(intercept, ngirls), nrow=397, ncol=2)
#X matrix for model 1
x_2<-matrix(data=c(intercept, ngirls, totchi, female, white, repub, age, agesq, demvote), nrow = 397, ncol=9)
#X matrix for model 2
#I'm recreating the coeffs for each model, in order. Each are according to the normal matrix formula.
transpose_x_1<-t(x_1)
traproduct_x_1<-t(x_1)%*%(x_1)
solve_product_x_1<-solve(traproduct_x_1)
product_above_x_1<-solve_product_x_1%*%transpose_x_1
beta_x_1<-product_above_x_1%*%y
print(beta_x_1)
#Now, I'm going to find the standard error using the formula from class.
error_1<-y-(x_1%*%beta_x_1)
error_1_transpose<-t(error_1)
numerator_x_1<-error_1_transpose%*%error_1
quotient_x_1<-numerator_x_1/(397-2)
sqrt_quotient_x_1<-sqrt(quotient_x_1)
print(sqrt_quotient_x_1)
#Now, I'll find R-squared using the formula from class.
R_2_mod_1<-1-(t(error_1)%*%(error_1))/(sum((y-mean(y))^2))
print(R_2_mod_1)
#First, I need to make dummy variabales for the different regions and what not.
basic$region_2<-ifelse(basic$region==2, 1, 0)
basic$region_3<-ifelse(basic$region==3, 1, 0)
basic$region_4<-ifelse(basic$region==4, 1, 0)
basic$region_5<-ifelse(basic$region==5, 1, 0)
basic$region_6<-ifelse(basic$region==6, 1, 0)
basic$region_7<-ifelse(basic$region==7, 1, 0)
basic$region_8<-ifelse(basic$region==8, 1, 0)
basic$region_9<-ifelse(basic$region==9, 1, 0)
basic$rgroup_2<-ifelse(basic$rgroup==2, 1, 0)
basic$rgroup_3<-ifelse(basic$rgroup==3, 1, 0)
basic$rgroup_4<-ifelse(basic$rgroup==4, 1, 0)
x_3<-matrix(data=c(intercept, ngirls, totchi, female, white, repub, age, agesq, demvote, basic$region_2, basic$region_3, basic$region_4, basic$region_5, basic$region_6, basic$region_7, basic$region_8, basic$region_9, basic$rgroup_2, basic$rgroup_3, basic$rgroup_4), nrow = 397, ncol=20)
#First, I need to make dummy variabales for the different regions and what not.
basic$region_2<-ifelse(basic$region==2, 1, 0)
basic$region_3<-ifelse(basic$region==3, 1, 0)
basic$region_4<-ifelse(basic$region==4, 1, 0)
basic$region_5<-ifelse(basic$region==5, 1, 0)
basic$region_6<-ifelse(basic$region==6, 1, 0)
basic$region_7<-ifelse(basic$region==7, 1, 0)
basic$region_8<-ifelse(basic$region==8, 1, 0)
basic$region_9<-ifelse(basic$region==9, 1, 0)
basic$rgroup_2<-ifelse(basic$rgroup==2, 1, 0)
basic$rgroup_3<-ifelse(basic$rgroup==3, 1, 0)
basic$rgroup_4<-ifelse(basic$rgroup==4, 1, 0)
x_3<-matrix(data=c(intercept, ngirls, totchi, female, white, repub, age, agesq, demvote, basic$region_2, basic$region_3, basic$region_4, basic$region_5, basic$region_6, basic$region_7, basic$region_8, basic$region_9, basic$rgroup_2, basic$rgroup_3, basic$rgroup_4), nrow = 397, ncol=20)
#I'm doing the same as above for finding the coeff for mod 2.
transpose_x_3<-t(x_3)
traproduct_x_3<-t(x_3)%*%(x_3)
solve_product_x_3<-solve(traproduct_x_3)
product_above_x_3<-solve_product_x_3%*%transpose_x_3
beta_x_3<-product_above_x_3%*%y
print(beta_x_3)
#Again, doing the same as above, but for s.e. for mod 2
error_3<-y-(x_3%*%beta_x_3)
error_3_transpose<-t(error_3)
numerator_x_3<-error_3_transpose%*%error_3
quotient_x_3<-numerator_x_3/(397-20)
sqrt_quotient_x_3<-sqrt(quotient_x_3)
print(sqrt_quotient_x_3)
#Again, doing the same as abovem but for R squared for mod 2.
R_2_mod_3<-1-(t(error_3)%*%(error_3))/(sum((y-mean(y))^2))
print(R_2_mod_3)
#First, I need to make dummy variabales for the different regions and what not.
basic$region_2<-ifelse(basic$region==2, 1, 0)
basic$region_3<-ifelse(basic$region==3, 1, 0)
basic$region_4<-ifelse(basic$region==4, 1, 0)
basic$region_5<-ifelse(basic$region==5, 1, 0)
basic$region_6<-ifelse(basic$region==6, 1, 0)
basic$region_7<-ifelse(basic$region==7, 1, 0)
basic$region_8<-ifelse(basic$region==8, 1, 0)
basic$region_9<-ifelse(basic$region==9, 1, 0)
basic$rgroup_1<-ifelse(basic$rgroup==1, 1, 0)
basic$rgroup_2<-ifelse(basic$rgroup==2, 1, 0)
basic$rgroup_3<-ifelse(basic$rgroup==3, 1, 0)
basic$rgroup_4<-ifelse(basic$rgroup==4, 1, 0)
x_3<-matrix(data=c(intercept, ngirls, totchi, female, white, repub, age, agesq, demvote, basic$region_2, basic$region_3, basic$region_4, basic$region_5, basic$region_6, basic$region_7, basic$region_8, basic$region_9, basic$rgroup_2, basic$rgroup_3, basic$rgroup_4), nrow = 397, ncol=20)
#I'm doing the same as above for finding the coeff for mod 2.
transpose_x_3<-t(x_3)
traproduct_x_3<-t(x_3)%*%(x_3)
solve_product_x_3<-solve(traproduct_x_3)
product_above_x_3<-solve_product_x_3%*%transpose_x_3
beta_x_3<-product_above_x_3%*%y
print(beta_x_3)
#Again, doing the same as above, but for s.e. for mod 2
error_3<-y-(x_3%*%beta_x_3)
error_3_transpose<-t(error_3)
numerator_x_3<-error_3_transpose%*%error_3
quotient_x_3<-numerator_x_3/(397-20)
sqrt_quotient_x_3<-sqrt(quotient_x_3)
print(sqrt_quotient_x_3)
#Again, doing the same as abovem but for R squared for mod 2.
R_2_mod_3<-1-(t(error_3)%*%(error_3))/(sum((y-mean(y))^2))
print(R_2_mod_3)
#First, I need to make dummy variabales for the different regions and what not.
basic$region_2<-ifelse(basic$region==2, 1, 0)
basic$region_3<-ifelse(basic$region==3, 1, 0)
basic$region_4<-ifelse(basic$region==4, 1, 0)
basic$region_5<-ifelse(basic$region==5, 1, 0)
basic$region_6<-ifelse(basic$region==6, 1, 0)
basic$region_7<-ifelse(basic$region==7, 1, 0)
basic$region_8<-ifelse(basic$region==8, 1, 0)
basic$region_9<-ifelse(basic$region==9, 1, 0)
basic$rgroup_1<-ifelse(basic$rgroup==1, 1, 0)
basic$rgroup_2<-ifelse(basic$rgroup==2, 1, 0)
basic$rgroup_3<-ifelse(basic$rgroup==3, 1, 0)
basic$rgroup_4<-ifelse(basic$rgroup==4, 1, 0)
x_3<-matrix(data=c(intercept, ngirls, totchi, female, white, repub, age, agesq, demvote, basic$rgroup_1, basic$rgroup_2, basic$rgroup_3, basic$rgroup_4, basic$region_2, basic$region_3, basic$region_4, basic$region_5, basic$region_6, basic$region_7, basic$region_8, basic$region_9), nrow = 397, ncol=20)
#I'm doing the same as above for finding the coeff for mod 2.
transpose_x_3<-t(x_3)
traproduct_x_3<-t(x_3)%*%(x_3)
solve_product_x_3<-solve(traproduct_x_3)
product_above_x_3<-solve_product_x_3%*%transpose_x_3
beta_x_3<-product_above_x_3%*%y
print(beta_x_3)
#Again, doing the same as above, but for s.e. for mod 2
error_3<-y-(x_3%*%beta_x_3)
error_3_transpose<-t(error_3)
numerator_x_3<-error_3_transpose%*%error_3
quotient_x_3<-numerator_x_3/(397-20)
sqrt_quotient_x_3<-sqrt(quotient_x_3)
print(sqrt_quotient_x_3)
#Again, doing the same as abovem but for R squared for mod 2.
R_2_mod_3<-1-(t(error_3)%*%(error_3))/(sum((y-mean(y))^2))
print(R_2_mod_3)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(gridExtra)
library(haven)
library(data.table)
library(fastDummies)
#Side note: I used na.omit before touching the data. Some slight leverage points are being dropped from mine, which maybe I should be worried about?
basic <- na.omit(read_dta("Downloads/basic.dta"))
#Here, I'm going to make the vairables we need for parts a and b.
nowtot<-basic$nowtot
ngirls<-basic$ngirls
totchi<-basic$totchi
prop_girl<-ngirls/totchi
cbind(basic, prop_girl)
age<-basic$age
agesq<-(age)^2
female<-basic$female
white<-basic$white
repub<-basic$repub
demvote<-basic$demvote
srvlng<-basic$srvlng
srvlngsq<-(srvlng)^2
rgroup<-as.factor(basic$rgroup)
region<-as.factor(basic$region)
number_girls_plot<-ggplot(data=basic, aes(y=nowtot, x=ngirls, color=repub))+
geom_point(color="blue")+
#Adding data points
geom_abline(method = "lm", formula = nowtot~ngirls, color="blue")+
#Adding regression Line
labs(title="Number of Girls")
#Making the first plot with number of girls. Not sure why the repub color coding isn't working here, but it works below. I can't seem to figure out why, but the code seems correct??
proportion_girls_plot<-ggplot(data=basic, aes(y=nowtot, x=prop_girl, color=repub))+
geom_point()+
#Adding data points
geom_abline(method = "lm", formula = nowtot~ngirls)+
#Adding regression Line
labs(title="Proportion of Girls")
#Making second plot with proportion of girls.
grid.arrange(number_girls_plot, proportion_girls_plot, ncol=2)
#Making into a left-right figure.
mod1<-lm(nowtot ~ ngirls)
#First model
mod2<-lm(nowtot ~ ngirls+totchi+female+white+repub+age+agesq+demvote)
#Second model
mod3<-lm(nowtot ~ ngirls+totchi+female+white+repub+age+agesq+demvote+srvlng+srvlngsq+rgroup+region)
#Third model
summary(mod1)
summary(mod2)
summary(mod3)
#Model summaries.
#Here, I'm just recoding everything in terms of y and x_i, etc. I'll add a separate code chunk for recreating model 3.
intercept<-rep(1, 397)
#Intercept vector
y<-nowtot
y_bar<-rep(mean(nowtot), 397)
#Mean of Y
x_1<-matrix(data=c(intercept, ngirls), nrow=397, ncol=2)
#X matrix for model 1
x_2<-matrix(data=c(intercept, ngirls, totchi, female, white, repub, age, agesq, demvote), nrow = 397, ncol=9)
#X matrix for model 2
#I'm recreating the coeffs for each model, in order. Each are according to the normal matrix formula.
transpose_x_1<-t(x_1)
traproduct_x_1<-t(x_1)%*%(x_1)
solve_product_x_1<-solve(traproduct_x_1)
product_above_x_1<-solve_product_x_1%*%transpose_x_1
beta_x_1<-product_above_x_1%*%y
print(beta_x_1)
#Now, I'm going to find the standard error using the formula from class.
error_1<-y-(x_1%*%beta_x_1)
error_1_transpose<-t(error_1)
numerator_x_1<-error_1_transpose%*%error_1
quotient_x_1<-numerator_x_1/(397-9)
sqrt_quotient_x_1<-sqrt(quotient_x_1)
print(sqrt_quotient_x_1)
#Now, I'll find R-squared using the formula from class.
R_2_mod_1<-1-(t(error_1)%*%(error_1))/(sum((y-mean(y))^2))
print(R_2_mod_1)
#First, I need to make dummy variabales for the different regions and what not.
basic$region_2<-ifelse(basic$region==2, 1, 0)
basic$region_3<-ifelse(basic$region==3, 1, 0)
basic$region_4<-ifelse(basic$region==4, 1, 0)
basic$region_5<-ifelse(basic$region==5, 1, 0)
basic$region_6<-ifelse(basic$region==6, 1, 0)
basic$region_7<-ifelse(basic$region==7, 1, 0)
basic$region_8<-ifelse(basic$region==8, 1, 0)
basic$region_9<-ifelse(basic$region==9, 1, 0)
basic$rgroup_1<-ifelse(basic$rgroup==1, 1, 0)
basic$rgroup_2<-ifelse(basic$rgroup==2, 1, 0)
basic$rgroup_3<-ifelse(basic$rgroup==3, 1, 0)
basic$rgroup_4<-ifelse(basic$rgroup==4, 1, 0)
x_3<-matrix(data=c(intercept, ngirls, totchi, female, white, repub, age, agesq, demvote, basic$rgroup_1, basic$rgroup_2, basic$rgroup_3, basic$rgroup_4, basic$region_2, basic$region_3, basic$region_4, basic$region_5, basic$region_6, basic$region_7, basic$region_8, basic$region_9), nrow = 397, ncol=20)
#I'm doing the same as above for finding the coeff for mod 2.
transpose_x_3<-t(x_3)
traproduct_x_3<-t(x_3)%*%(x_3)
solve_product_x_3<-solve(traproduct_x_3)
product_above_x_3<-solve_product_x_3%*%transpose_x_3
beta_x_3<-product_above_x_3%*%y
print(beta_x_3)
#Again, doing the same as above, but for s.e. for mod 2
error_3<-y-(x_3%*%beta_x_3)
error_3_transpose<-t(error_3)
numerator_x_3<-error_3_transpose%*%error_3
quotient_x_3<-numerator_x_3/(397-20)
sqrt_quotient_x_3<-sqrt(quotient_x_3)
print(sqrt_quotient_x_3)
#Again, doing the same as abovem but for R squared for mod 2.
R_2_mod_3<-1-(t(error_3)%*%(error_3))/(sum((y-mean(y))^2))
print(R_2_mod_3)
#First, I need to make dummy variabales for the different regions and what not.
basic$region_2<-ifelse(basic$region==2, 1, 0)
basic$region_3<-ifelse(basic$region==3, 1, 0)
basic$region_4<-ifelse(basic$region==4, 1, 0)
basic$region_5<-ifelse(basic$region==5, 1, 0)
basic$region_6<-ifelse(basic$region==6, 1, 0)
basic$region_7<-ifelse(basic$region==7, 1, 0)
basic$region_8<-ifelse(basic$region==8, 1, 0)
basic$region_9<-ifelse(basic$region==9, 1, 0)
basic$rgroup_1<-ifelse(basic$rgroup==1, 1, 0)
basic$rgroup_2<-ifelse(basic$rgroup==2, 1, 0)
basic$rgroup_3<-ifelse(basic$rgroup==3, 1, 0)
basic$rgroup_4<-ifelse(basic$rgroup==4, 1, 0)
x_3<-matrix(data=c(intercept, ngirls, totchi, female, white, repub, age, agesq, demvote, basic$rgroup_1, basic$rgroup_2, basic$rgroup_3, basic$rgroup_4, basic$region_2, basic$region_3, basic$region_4, basic$region_5, basic$region_6, basic$region_7, basic$region_8, basic$region_9), nrow = 397, ncol=21)
#I'm doing the same as above for finding the coeff for mod 2.
transpose_x_3<-t(x_3)
traproduct_x_3<-t(x_3)%*%(x_3)
solve_product_x_3<-solve(traproduct_x_3)
product_above_x_3<-solve_product_x_3%*%transpose_x_3
beta_x_3<-product_above_x_3%*%y
print(beta_x_3)
#Again, doing the same as above, but for s.e. for mod 2
error_3<-y-(x_3%*%beta_x_3)
error_3_transpose<-t(error_3)
numerator_x_3<-error_3_transpose%*%error_3
quotient_x_3<-numerator_x_3/(397-20)
sqrt_quotient_x_3<-sqrt(quotient_x_3)
print(sqrt_quotient_x_3)
#Again, doing the same as abovem but for R squared for mod 2.
R_2_mod_3<-1-(t(error_3)%*%(error_3))/(sum((y-mean(y))^2))
print(R_2_mod_3)
#First, I need to make dummy variabales for the different regions and what not.
basic$region_2<-ifelse(basic$region==2, 1, 0)
basic$region_3<-ifelse(basic$region==3, 1, 0)
basic$region_4<-ifelse(basic$region==4, 1, 0)
basic$region_5<-ifelse(basic$region==5, 1, 0)
basic$region_6<-ifelse(basic$region==6, 1, 0)
basic$region_7<-ifelse(basic$region==7, 1, 0)
basic$region_8<-ifelse(basic$region==8, 1, 0)
basic$region_9<-ifelse(basic$region==9, 1, 0)
basic$rgroup_1<-ifelse(basic$rgroup==1, 1, 0)
basic$rgroup_2<-ifelse(basic$rgroup==2, 1, 0)
basic$rgroup_3<-ifelse(basic$rgroup==3, 1, 0)
basic$rgroup_4<-ifelse(basic$rgroup==4, 1, 0)
x_3<-matrix(data=c(intercept, ngirls, totchi, female, white, repub, age, agesq, demvote, basic$rgroup_1, basic$rgroup_2, basic$rgroup_3, basic$rgroup_4, basic$region_2, basic$region_3, basic$region_4, basic$region_5, basic$region_6, basic$region_7, basic$region_8, basic$region_9), nrow = 397, ncol=21)
#I'm doing the same as above for finding the coeff for mod 2.
transpose_x_3<-t(x_3)
traproduct_x_3<-t(x_3)%*%(x_3)
solve_product_x_3<-solve(traproduct_x_3)
product_above_x_3<-solve_product_x_3%*%transpose_x_3
beta_x_3<-product_above_x_3%*%y
print(beta_x_3)
#Again, doing the same as above, but for s.e. for mod 2
error_3<-y-(x_3%*%beta_x_3)
error_3_transpose<-t(error_3)
numerator_x_3<-error_3_transpose%*%error_3
quotient_x_3<-numerator_x_3/(397-21)
sqrt_quotient_x_3<-sqrt(quotient_x_3)
print(sqrt_quotient_x_3)
#Again, doing the same as abovem but for R squared for mod 2.
R_2_mod_3<-1-(t(error_3)%*%(error_3))/(sum((y-mean(y))^2))
print(R_2_mod_3)
#First, I need to make dummy variabales for the different regions and what not.
basic$region_2<-ifelse(basic$region==2, 1, 0)
basic$region_3<-ifelse(basic$region==3, 1, 0)
basic$region_4<-ifelse(basic$region==4, 1, 0)
basic$region_5<-ifelse(basic$region==5, 1, 0)
basic$region_6<-ifelse(basic$region==6, 1, 0)
basic$region_7<-ifelse(basic$region==7, 1, 0)
basic$region_8<-ifelse(basic$region==8, 1, 0)
basic$region_9<-ifelse(basic$region==9, 1, 0)
basic$rgroup_1<-ifelse(basic$rgroup==1, 1, 0)
basic$rgroup_2<-ifelse(basic$rgroup==2, 1, 0)
basic$rgroup_3<-ifelse(basic$rgroup==3, 1, 0)
basic$rgroup_4<-ifelse(basic$rgroup==4, 1, 0)
x_3<-matrix(data=c(intercept, ngirls, totchi, female, white, repub, age, agesq, demvote, basic$rgroup_1, basic$rgroup_2, basic$rgroup_3, basic$rgroup_4, basic$region_2, basic$region_3, basic$region_4, basic$region_5, basic$region_6, basic$region_7, basic$region_8, basic$region_9), nrow = 397, ncol=21)
#I'm doing the same as above for finding the coeff for mod 2.
transpose_x_3<-t(x_3)
traproduct_x_3<-t(x_3)%*%(x_3)
solve_product_x_3<-solve(traproduct_x_3)
product_above_x_3<-solve_product_x_3%*%transpose_x_3
beta_x_3<-product_above_x_3%*%y
print(beta_x_3)
#Again, doing the same as above, but for s.e. for mod 2
error_3<-y-(x_3%*%beta_x_3)
error_3_transpose<-t(error_3)
numerator_x_3<-error_3_transpose%*%error_3
quotient_x_3<-numerator_x_3/(397-23)
sqrt_quotient_x_3<-sqrt(quotient_x_3)
print(sqrt_quotient_x_3)
#Again, doing the same as abovem but for R squared for mod 2.
R_2_mod_3<-1-(t(error_3)%*%(error_3))/(sum((y-mean(y))^2))
print(R_2_mod_3)
#First, I need to make dummy variabales for the different regions and what not.
basic$region_2<-ifelse(basic$region==2, 1, 0)
basic$region_3<-ifelse(basic$region==3, 1, 0)
basic$region_4<-ifelse(basic$region==4, 1, 0)
basic$region_5<-ifelse(basic$region==5, 1, 0)
basic$region_6<-ifelse(basic$region==6, 1, 0)
basic$region_7<-ifelse(basic$region==7, 1, 0)
basic$region_8<-ifelse(basic$region==8, 1, 0)
basic$region_9<-ifelse(basic$region==9, 1, 0)
basic$rgroup_1<-ifelse(basic$rgroup==1, 1, 0)
basic$rgroup_2<-ifelse(basic$rgroup==2, 1, 0)
basic$rgroup_3<-ifelse(basic$rgroup==3, 1, 0)
basic$rgroup_4<-ifelse(basic$rgroup==4, 1, 0)
x_3<-matrix(data=c(intercept, ngirls, totchi, female, white, repub, age, agesq, demvote, basic$rgroup_1, basic$rgroup_2, basic$rgroup_3, basic$rgroup_4, basic$region_2, basic$region_3, basic$region_4, basic$region_5, basic$region_6, basic$region_7, basic$region_8, basic$region_9), nrow = 397, ncol=21)
#I'm doing the same as above for finding the coeff for mod 2.
transpose_x_3<-t(x_3)
traproduct_x_3<-t(x_3)%*%(x_3)
solve_product_x_3<-solve(traproduct_x_3)
product_above_x_3<-solve_product_x_3%*%transpose_x_3
beta_x_3<-product_above_x_3%*%y
print(beta_x_3)
#Again, doing the same as above, but for s.e. for mod 2
error_3<-y-(x_3%*%beta_x_3)
error_3_transpose<-t(error_3)
numerator_x_3<-error_3_transpose%*%error_3
quotient_x_3<-numerator_x_3/(397-22)
sqrt_quotient_x_3<-sqrt(quotient_x_3)
print(sqrt_quotient_x_3)
#Again, doing the same as abovem but for R squared for mod 2.
R_2_mod_3<-1-(t(error_3)%*%(error_3))/(sum((y-mean(y))^2))
print(R_2_mod_3)
#First, I need to make dummy variabales for the different regions and what not.
basic$region_2<-ifelse(basic$region==2, 1, 0)
basic$region_3<-ifelse(basic$region==3, 1, 0)
basic$region_4<-ifelse(basic$region==4, 1, 0)
basic$region_5<-ifelse(basic$region==5, 1, 0)
basic$region_6<-ifelse(basic$region==6, 1, 0)
basic$region_7<-ifelse(basic$region==7, 1, 0)
basic$region_8<-ifelse(basic$region==8, 1, 0)
basic$region_9<-ifelse(basic$region==9, 1, 0)
basic$rgroup_1<-ifelse(basic$rgroup==1, 1, 0)
basic$rgroup_2<-ifelse(basic$rgroup==2, 1, 0)
basic$rgroup_3<-ifelse(basic$rgroup==3, 1, 0)
basic$rgroup_4<-ifelse(basic$rgroup==4, 1, 0)
x_3<-matrix(data=c(intercept, ngirls, totchi, female, white, repub, age, agesq, demvote, basic$rgroup_1, basic$rgroup_2, basic$rgroup_3, basic$rgroup_4, basic$region_2, basic$region_3, basic$region_4, basic$region_5, basic$region_6, basic$region_7, basic$region_8, basic$region_9), nrow = 397, ncol=21)
#I'm doing the same as above for finding the coeff for mod 2.
transpose_x_3<-t(x_3)
traproduct_x_3<-t(x_3)%*%(x_3)
solve_product_x_3<-solve(traproduct_x_3)
product_above_x_3<-solve_product_x_3%*%transpose_x_3
beta_x_3<-product_above_x_3%*%y
print(beta_x_3)
#Again, doing the same as above, but for s.e. for mod 2
error_3<-y-(x_3%*%beta_x_3)
error_3_transpose<-t(error_3)
numerator_x_3<-error_3_transpose%*%error_3
quotient_x_3<-numerator_x_3/(397-23)
sqrt_quotient_x_3<-sqrt(quotient_x_3)
print(sqrt_quotient_x_3)
#Again, doing the same as abovem but for R squared for mod 2.
R_2_mod_3<-1-(t(error_3)%*%(error_3))/(sum((y-mean(y))^2))
print(R_2_mod_3)
mod1<-lm(nowtot ~ ngirls)
#First model
mod2<-lm(nowtot ~ ngirls+totchi+female+white+repub+age+agesq+demvote)
#Second model
mod3<-lm(nowtot ~ ngirls+totchi+female+white+repub+age+agesq+demvote+srvlng+srvlngsq+rgroup+region)
#Third model
summary(mod1)
summary(mod2)
summary(mod3)
#Model summaries.
#First, I need to make dummy variabales for the different regions and what not.
basic$region_2<-ifelse(basic$region==2, 1, 0)
basic$region_3<-ifelse(basic$region==3, 1, 0)
basic$region_4<-ifelse(basic$region==4, 1, 0)
basic$region_5<-ifelse(basic$region==5, 1, 0)
basic$region_6<-ifelse(basic$region==6, 1, 0)
basic$region_7<-ifelse(basic$region==7, 1, 0)
basic$region_8<-ifelse(basic$region==8, 1, 0)
basic$region_9<-ifelse(basic$region==9, 1, 0)
basic$rgroup_1<-ifelse(basic$rgroup==1, 1, 0)
basic$rgroup_2<-ifelse(basic$rgroup==2, 1, 0)
basic$rgroup_3<-ifelse(basic$rgroup==3, 1, 0)
basic$rgroup_4<-ifelse(basic$rgroup==4, 1, 0)
x_3<-matrix(data=c(intercept, ngirls, totchi, female, white, repub, age, agesq, demvote, basic$rgroup_1, basic$rgroup_2, basic$rgroup_3, basic$rgroup_4, basic$region_2, basic$region_3, basic$region_4, basic$region_5, basic$region_6, basic$region_7, basic$region_8, basic$region_9), nrow = 397, ncol=22)
#I'm doing the same as above for finding the coeff for mod 2.
transpose_x_3<-t(x_3)
traproduct_x_3<-t(x_3)%*%(x_3)
solve_product_x_3<-solve(traproduct_x_3)
#First, I need to make dummy variabales for the different regions and what not.
basic$region_2<-ifelse(basic$region==2, 1, 0)
basic$region_3<-ifelse(basic$region==3, 1, 0)
basic$region_4<-ifelse(basic$region==4, 1, 0)
basic$region_5<-ifelse(basic$region==5, 1, 0)
basic$region_6<-ifelse(basic$region==6, 1, 0)
basic$region_7<-ifelse(basic$region==7, 1, 0)
basic$region_8<-ifelse(basic$region==8, 1, 0)
basic$region_9<-ifelse(basic$region==9, 1, 0)
basic$rgroup_1<-ifelse(basic$rgroup==1, 1, 0)
basic$rgroup_2<-ifelse(basic$rgroup==2, 1, 0)
basic$rgroup_3<-ifelse(basic$rgroup==3, 1, 0)
basic$rgroup_4<-ifelse(basic$rgroup==4, 1, 0)
x_3<-matrix(data=c(intercept, ngirls, totchi, female, white, repub, age, agesq, demvote, basic$rgroup_1, basic$rgroup_2, basic$rgroup_3, basic$rgroup_4, basic$region_2, basic$region_3, basic$region_4, basic$region_5, basic$region_6, basic$region_7, basic$region_8, basic$region_9), nrow = 397, ncol=21)
#I'm doing the same as above for finding the coeff for mod 2.
transpose_x_3<-t(x_3)
traproduct_x_3<-t(x_3)%*%(x_3)
solve_product_x_3<-solve(traproduct_x_3)
product_above_x_3<-solve_product_x_3%*%transpose_x_3
beta_x_3<-product_above_x_3%*%y
print(beta_x_3)
#Again, doing the same as above, but for s.e. for mod 2
error_3<-y-(x_3%*%beta_x_3)
error_3_transpose<-t(error_3)
numerator_x_3<-error_3_transpose%*%error_3
quotient_x_3<-numerator_x_3/(397-22)
sqrt_quotient_x_3<-sqrt(quotient_x_3)
print(sqrt_quotient_x_3)
#Again, doing the same as abovem but for R squared for mod 2.
R_2_mod_3<-1-(t(error_3)%*%(error_3))/(sum((y-mean(y))^2))
print(R_2_mod_3)
one_vect<-rep(1, 397)
weird_mod_1<-lm(ngirls~one_vect)
resid_weird_1<-weird_mod_1-ngirls
summary(weird_mod_1)
weird_mod_1<-lm(ngirls~intercept)
summary(weird_mod_1)
resid_weird_1<-weird_mod_1-ngirls
summary(weird_mod_1)
resid_weird_1<-1.25945-ngirls
weird_mod_2<-lm(nowtot~intercept)
summary(weird_mod_2)
resid_nowtot<-41.222-nowtot
final_mod<-lm(resid_nowtot~resid_ngirls)
resid_ngirls<-1.25945-ngirls
final_mod<-lm(resid_nowtot~resid_ngirls)
summary(final_mod)
11*8.5
93.5/150
187/300
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
std<-sqrt(187/300)
#Storing the standard deviation of gamma as an object.
a<-1.5/std
print(1-pnorm(a, mean=0, sd=1))
z-score<-(1.5/(sqrt(187/300)))
z_score<-(1.5/(sqrt(187/300)))
pnorm(z_score)
1-pnorm(z_score)
1.5/std
(1/25)+(1/30)
8.5((1/25)+(1/30))
8.5*((1/25)+(1/30))
sqrt(8.5*((1/25)+(1/30)))
current.code <- as.package("integralIt")
load_all(current.code)
document(current.code)
install(current.code)
library(devtools)
library(roxygen2)
setwd("~/Users/zionlittle/Downloads/GitHub/AppliedStatisticalProgramming2022")
current.code <- as.package("integralIt")
load_all(current.code)
document(current.code)
install(current.code)
setwd("~/Users/zionlittle/Downloads/GitHub/AppliedStatisticalProgramming2022")
getwd()
setwd("~/Downloads/GitHub/AppliedStatisticalProgramming2022")
current.code <- as.package("integralIt")
load_all(current.code)
document(current.code)
install(current.code)
library(devtools)
library(roxygen2)
setwd("~/Downloads/GitHub/AppliedStatisticalProgramming2022")
current.code <- as.package("integralIt")
load_all(current.code)
document(current.code)
install(current.code)
